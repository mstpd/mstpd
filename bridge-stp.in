#!/bin/sh
# /sbin/bridge-stp is called by the kernel to start/stop spanning tree on a
# bridge.
#
# Configuration is in @bridgestpconffile@

# Make sure umask is sane
umask 022

# Set up a default search path.
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
export PATH

if [ $# -ne 2 ]; then
    echo "Usage: bridge-stp <bridge> {start|stop}" >&2
    exit 1
fi
bridge=$1
pid_file='@mstpdpidfile@'
conf_file='@bridgestpconffile@'
bin_dir='@sbindir@'
net_dir=/sys/class/net

# A space-separated list of bridges for which MSTP should be used in place of
# the kernel's STP implementation.  If empty, MSTP will be used for all bridges.
MSTP_BRIDGES=''

# Set $pid to pids from /var/run* for {program}.  $pid should be declared
# local in the caller.
# Returns LSB exit code for the 'status' action.
checkpid()
{
    pid=
    if [ -f "$1" ] ; then
        local line p
        read line < "$pid_file"
        for p in $line; do
            if [ "$p" = "${p%[!0-9]*}" ] && [ -d "/proc/$p" ]; then
                pid="$pid $p"
            fi
        done
        if [ -n "$pid" ]; then
            return 0
        fi
        return 1 # "Program is dead and /var/run pid file exists"
    fi
    return 3 # "Program is not running"
}

case $2 in
    start)
        if [ -e "$conf_file" ]; then
            . "$conf_file" || exit
        fi
        checkpid $pid_file || exit 1
        if [ -d "$net_dir/$bridge/bridge" ]; then
            allowed=1
            if [ -n "$MSTP_BRIDGES" ]; then
                allowed=0
                for b in $MSTP_BRIDGES; do
                    if [ "$bridge" == "$b" ]; then
                        allowed=1
                    fi
                done
            fi
            if [ "$allowed" -eq 1 ]; then
                exec $bin_dir/mstpctl addbridge $bridge
            fi
        fi
        exit 1 ;;
    stop)
        exec $bin_dir/mstpctl delbridge $bridge
        ;;
    *)
        echo "Unknown action: $2" >&2
        echo "Usage: bridge-stp <bridge> {start|stop}" >&2
        exit 1
esac
